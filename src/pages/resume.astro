---
import Layout from '../layouts/layout.astro'
import InteractiveResume from '../components/InteractiveResume.astro'
---

<Layout
  content={{
    title: 'Resume | Soham Sarkar',
    description: 'Interactive resume of Soham Sarkar',
  }}
>
  <div id='resume-container'>
    <canvas id='bg-canvas'></canvas>
    <InteractiveResume />
  </div>
</Layout>

<style>
  #resume-container {
    position: relative;
    width: 100%;
    min-height: 100vh;
    background: #000;
  }

  #bg-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
  }

  #interactive-resume {
    position: relative;
    z-index: 1;
    min-height: 100vh;
  }
</style>

<script>
  import * as THREE from 'three'

  // Simple, professional 3D background
  function init3DBackground() {
    const canvas = document.getElementById('bg-canvas') as HTMLCanvasElement
    if (!canvas) return

    const scene = new THREE.Scene()
    scene.background = new THREE.Color(0x000000)

    const camera = new THREE.PerspectiveCamera(
      50,
      window.innerWidth / window.innerHeight,
      0.1,
      1000,
    )
    camera.position.z = 30

    const renderer = new THREE.WebGLRenderer({
      canvas: canvas,
      antialias: true,
      alpha: true,
    })
    renderer.setSize(window.innerWidth, window.innerHeight)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))

    // Create circular star texture
    const starCanvas = document.createElement('canvas')
    starCanvas.width = 32
    starCanvas.height = 32
    const ctx = starCanvas.getContext('2d')!

    // Draw a circular gradient for star effect
    const gradient = ctx.createRadialGradient(16, 16, 0, 16, 16, 16)
    gradient.addColorStop(0, 'rgba(255, 255, 255, 1)')
    gradient.addColorStop(0.2, 'rgba(255, 255, 255, 0.8)')
    gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.3)')
    gradient.addColorStop(1, 'rgba(255, 255, 255, 0)')

    ctx.fillStyle = gradient
    ctx.fillRect(0, 0, 32, 32)

    const starTexture = new THREE.CanvasTexture(starCanvas)

    // Create subtle particle system
    const particleCount = 200
    const geometry = new THREE.BufferGeometry()
    const positions = new Float32Array(particleCount * 3)
    const colors = new Float32Array(particleCount * 3)
    const sizes = new Float32Array(particleCount)

    for (let i = 0; i < particleCount; i++) {
      positions[i * 3] = (Math.random() - 0.5) * 50
      positions[i * 3 + 1] = (Math.random() - 0.5) * 50
      positions[i * 3 + 2] = (Math.random() - 0.5) * 30

      // Blue-purple gradient colors
      const color = new THREE.Color()
      color.setHSL(0.6 + Math.random() * 0.1, 0.7, 0.5)
      colors[i * 3] = color.r
      colors[i * 3 + 1] = color.g
      colors[i * 3 + 2] = color.b

      // Varying star sizes for depth
      sizes[i] = Math.random() * 2 + 0.5
    }

    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))
    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))
    geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1))

    const material = new THREE.PointsMaterial({
      size: 1,
      vertexColors: true,
      transparent: true,
      opacity: 0.6,
      blending: THREE.AdditiveBlending,
      sizeAttenuation: true,
      map: starTexture,
    })

    const particles = new THREE.Points(geometry, material)
    scene.add(particles)

    // Add subtle lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.1)
    scene.add(ambientLight)

    // Mouse interaction
    let mouseX = 0
    let mouseY = 0

    function onMouseMove(event: MouseEvent) {
      mouseX = (event.clientX / window.innerWidth) * 2 - 1
      mouseY = -(event.clientY / window.innerHeight) * 2 + 1
    }

    window.addEventListener('mousemove', onMouseMove)

    // Handle resize
    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight
      camera.updateProjectionMatrix()
      renderer.setSize(window.innerWidth, window.innerHeight)
    }

    window.addEventListener('resize', onWindowResize)

    // Animation loop
    function animate() {
      requestAnimationFrame(animate)

      // Subtle particle rotation
      particles.rotation.y += 0.0005
      particles.rotation.x += 0.0002

      // Subtle camera movement based on mouse
      camera.position.x += (mouseX * 2 - camera.position.x) * 0.02
      camera.position.y += (mouseY * 2 - camera.position.y) * 0.02
      camera.lookAt(scene.position)

      renderer.render(scene, camera)
    }

    animate()
  }

  // Initialize 3D background
  init3DBackground()
</script>

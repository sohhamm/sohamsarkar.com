---
import ProductCard from './ProductCard.astro'
import type {Product} from './ProductsSection.astro'

export interface Props {
  products: Product[]
}

const {products} = Astro.props
---

<div class='product-carousel-container' data-carousel-container>
  <div class='product-carousel' data-carousel>
    {
      products.map((product, index) => (
        <div class='carousel-slide' data-slide={index}>
          <ProductCard product={product} />
        </div>
      ))
    }
  </div>

  {
    products.length > 1 && (
      <div class='carousel-controls' data-controls>
        <button class='carousel-btn prev-btn' data-prev-btn aria-label='Previous product'>
          <svg
            width='20'
            height='20'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
          >
            <path d='M15 18l-6-6 6-6' />
          </svg>
        </button>

        <div class='carousel-indicators'>
          {products.map((_, index) => (
            <button
              class={`indicator ${index === 0 ? 'active' : ''}`}
              data-indicator={index}
              aria-label={`Go to product ${index + 1}`}
            />
          ))}
        </div>

        <button class='carousel-btn next-btn' data-next-btn aria-label='Next product'>
          <svg
            width='20'
            height='20'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
          >
            <path d='M9 18l6-6-6-6' />
          </svg>
        </button>
      </div>
    )
  }
</div>

<style>
  .product-carousel-container {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .product-carousel {
    display: flex;
    width: 100%;
    will-change: transform;
    transition: none; /* Let Motion handle transitions */
  }

  .carousel-slide {
    min-width: 100%;
    flex-shrink: 0;
    display: flex;
    justify-content: center;
  }

  .carousel-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 24px;
    margin-top: 40px;
    width: auto;
    min-width: fit-content;
    /* Remove initial opacity/transform - let Motion handle it */
  }

  .carousel-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
    min-width: 44px;
    flex-shrink: 0;
    border-radius: 50%;
    border: 1px solid rgba(255, 255, 255, 0.15);
    background: rgba(255, 255, 255, 0.05);
    color: #fff;
    cursor: pointer;
    backdrop-filter: blur(12px);
    will-change: transform;
    transition: none; /* Let Motion handle transitions */
    z-index: 10;
  }

  .carousel-btn:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }

  .carousel-btn:hover:not(:disabled) {
    border-color: rgba(255, 255, 255, 0.25);
    background: rgba(255, 255, 255, 0.1);
  }

  .carousel-indicators {
    display: flex;
    gap: 10px;
    flex-shrink: 0;
  }

  .indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    border: none;
    background: rgba(255, 255, 255, 0.3);
    cursor: pointer;
    will-change: transform, background-color;
    transition: none; /* Let Motion handle transitions */
  }

  .indicator.active {
    background: #fff;
    transform: scale(1.4);
  }

  @media (max-width: 768px) {
    .carousel-controls {
      gap: 20px;
      margin-top: 32px;
    }

    .carousel-btn {
      width: 40px;
      height: 40px;
    }
  }
</style>

<script>
  import {animate} from 'motion'

  class ProductCarousel {
    private container: HTMLElement | null = null
    private carousel: HTMLElement | null = null
    private slides: NodeListOf<HTMLElement>
    private indicators: NodeListOf<HTMLElement>
    private prevBtn: HTMLElement | null = null
    private nextBtn: HTMLElement | null = null
    private controls: HTMLElement | null = null
    private currentSlide: number = 0
    private totalSlides: number = 0
    private autoPlayInterval: number | null = null
    private isInitialized: boolean = false

    constructor() {
      this.slides = document.querySelectorAll('.carousel-slide')
      this.indicators = document.querySelectorAll('[data-indicator]')
      this.init()
    }

    private init() {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.setup())
      } else {
        // Use small delay to ensure all components are ready
        setTimeout(() => this.setup(), 100)
      }
    }

    private setup() {
      this.container = document.querySelector('[data-carousel-container]')
      this.carousel = document.querySelector('[data-carousel]')
      this.slides = document.querySelectorAll('.carousel-slide')
      this.indicators = document.querySelectorAll('[data-indicator]')
      this.prevBtn = document.querySelector('[data-prev-btn]')
      this.nextBtn = document.querySelector('[data-next-btn]')
      this.controls = document.querySelector('[data-controls]')

      this.totalSlides = this.slides.length

      if (!this.carousel || this.totalSlides <= 1) {
        console.log('Carousel not needed or not found')
        return
      }

      // Move controls to header if container exists
      this.moveControlsToHeader()

      this.bindEvents()
      this.setupAnimations()
      this.startAutoPlay()
      this.animateInitialLoad()
      this.isInitialized = true
    }

    private moveControlsToHeader() {
      const headerContainer = document.getElementById('carousel-controls-container')

      if (!headerContainer || !this.controls) {
        console.log('Header container or controls not found, keeping controls in original position')
        return
      }

      // Move existing controls to header
      headerContainer.appendChild(this.controls)
      console.log('Controls moved to header')
    }

    private animateInitialLoad() {
      if (!this.controls) return

      // Set initial state
      this.controls.style.opacity = '0'
      this.controls.style.transform = 'translateY(20px)'

      // Animate controls in
      animate(
        this.controls,
        {
          opacity: 1,
          transform: 'translateY(0px)',
        },
        {
          duration: 0.6,
          delay: 0.3,
          ease: [0.22, 1, 0.36, 1],
        },
      )
    }

    private setupAnimations() {
      // Setup button hover animations
      const buttons = [this.prevBtn, this.nextBtn].filter(Boolean)

      buttons.forEach(button => {
        if (!button) return

        button.addEventListener('mouseenter', () => {
          animate(
            button,
            {
              scale: 1.05,
              transform: 'translateY(-2px) scale(1.05)',
            },
            {duration: 0.2, ease: [0.22, 1, 0.36, 1]},
          )
        })

        button.addEventListener('mouseleave', () => {
          animate(
            button,
            {
              scale: 1,
              transform: 'translateY(0px) scale(1)',
            },
            {duration: 0.2, ease: [0.22, 1, 0.36, 1]},
          )
        })

        button.addEventListener('mousedown', () => {
          animate(button, {scale: 0.95}, {duration: 0.1})
        })

        button.addEventListener('mouseup', () => {
          animate(button, {scale: 1.05}, {duration: 0.1})
        })
      })

      // Setup indicator hover animations
      this.indicators.forEach(indicator => {
        indicator.addEventListener('mouseenter', () => {
          if (!indicator.classList.contains('active')) {
            animate(
              indicator,
              {
                scale: 1.2,
                backgroundColor: 'rgba(255, 255, 255, 0.6)',
              },
              {duration: 0.2},
            )
          }
        })

        indicator.addEventListener('mouseleave', () => {
          if (!indicator.classList.contains('active')) {
            animate(
              indicator,
              {
                scale: 1,
                backgroundColor: 'rgba(255, 255, 255, 0.3)',
              },
              {duration: 0.2},
            )
          }
        })
      })
    }

    private bindEvents() {
      this.prevBtn?.addEventListener('click', () => this.prevSlide())
      this.nextBtn?.addEventListener('click', () => this.nextSlide())

      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => this.goToSlide(index))
      })

      // Auto-play controls
      this.container?.addEventListener('mouseenter', () => this.stopAutoPlay())
      this.container?.addEventListener('mouseleave', () => this.startAutoPlay())

      // Keyboard navigation
      document.addEventListener('keydown', e => {
        if (!this.isInitialized) return

        if (e.key === 'ArrowLeft') {
          e.preventDefault()
          this.prevSlide()
        }
        if (e.key === 'ArrowRight') {
          e.preventDefault()
          this.nextSlide()
        }
      })

      // Touch/swipe support
      this.setupTouchEvents()
    }

    private setupTouchEvents() {
      if (!this.carousel) return

      let touchStartX = 0
      let touchEndX = 0
      let isDragging = false

      this.carousel.addEventListener(
        'touchstart',
        e => {
          touchStartX = e.changedTouches[0].screenX
          isDragging = true
        },
        {passive: true},
      )

      this.carousel.addEventListener(
        'touchmove',
        e => {
          if (!isDragging) return
          e.preventDefault()
        },
        {passive: false},
      )

      this.carousel.addEventListener(
        'touchend',
        e => {
          if (!isDragging) return
          touchEndX = e.changedTouches[0].screenX
          this.handleSwipe(touchStartX, touchEndX)
          isDragging = false
        },
        {passive: true},
      )
    }

    private handleSwipe(startX: number, endX: number) {
      const swipeThreshold = 50
      const diff = startX - endX

      if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
          this.nextSlide()
        } else {
          this.prevSlide()
        }
      }
    }

    private goToSlide(index: number) {
      if (index === this.currentSlide) return

      this.currentSlide = index
      this.updateCarousel()
      this.updateIndicators()
      this.resetAutoPlay()
    }

    private nextSlide() {
      this.currentSlide = (this.currentSlide + 1) % this.totalSlides
      this.updateCarousel()
      this.updateIndicators()
      this.resetAutoPlay()
    }

    private prevSlide() {
      this.currentSlide = (this.currentSlide - 1 + this.totalSlides) % this.totalSlides
      this.updateCarousel()
      this.updateIndicators()
      this.resetAutoPlay()
    }

    private updateCarousel() {
      if (!this.carousel) return

      const translateX = -this.currentSlide * 100

      animate(
        this.carousel,
        {
          transform: `translateX(${translateX}%)`,
        },
        {
          duration: 0.8,
          ease: [0.25, 0.46, 0.45, 0.94],
        },
      )
    }

    private updateIndicators() {
      this.indicators.forEach((indicator, index) => {
        const isActive = index === this.currentSlide

        if (isActive && !indicator.classList.contains('active')) {
          indicator.classList.add('active')
          animate(
            indicator,
            {
              scale: 1.4,
              backgroundColor: '#fff',
            },
            {duration: 0.3, ease: [0.22, 1, 0.36, 1]},
          )
        } else if (!isActive && indicator.classList.contains('active')) {
          indicator.classList.remove('active')
          animate(
            indicator,
            {
              scale: 1,
              backgroundColor: 'rgba(255, 255, 255, 0.3)',
            },
            {duration: 0.3, ease: [0.22, 1, 0.36, 1]},
          )
        }
      })
    }

    private startAutoPlay() {
      if (this.totalSlides <= 1) return

      this.autoPlayInterval = window.setInterval(() => {
        this.nextSlide()
      }, 6000)
    }

    private stopAutoPlay() {
      if (this.autoPlayInterval) {
        clearInterval(this.autoPlayInterval)
        this.autoPlayInterval = null
      }
    }

    private resetAutoPlay() {
      this.stopAutoPlay()
      this.startAutoPlay()
    }

    public destroy() {
      this.stopAutoPlay()
    }
  }

  new ProductCarousel()

  document.addEventListener('astro:before-preparation', () => {
    // Cleanup before page navigation
  })
</script>
